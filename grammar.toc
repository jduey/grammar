
(add-ns sm (git-dependency "github.com:jduey/state-maybe.git" "state-maybe.toc"))
(add-ns fr (git-dependency "github.com:jduey/free.git" "free.toc"))
(add-ns parser (git-dependency "github.com:jduey/parser.git" "parser.toc"))
(add-ns rd (git-dependency "github.com:jduey/recursive-descent.git" "recursive-descent.toc"))

(defn debug [tag]
  (parser/ignore
   (parser/rule "debug"
                (parser/term-fn (fn [text]
                                  (print-err tag (subs text 0 10))
                                  (maybe (list "" text)))))))

(def symbol-start
  (parser/rule "symbol-start"
               (parser/any parser/alpha (parser/one-of "._<>=+-*/"))))

(def symbol-punct
  (parser/rule "symbol-punct"
               (parser/one-of "._<>=*/+!-?")))

(def symbol-char
  (parser/rule "symbol-char"
               (parser/any parser/alpha parser/digit symbol-punct)))

(def rest-of-symbol
  (parser/rule "rest-of-symbol"
               (parser/none-or-more symbol-char)))

(defprotocol Tagged
  (untag [x] x))

(deftype tagged-symbol [ns base sym file-name line-num]
  Tagged
  (untag [_] sym)

  Stringable
  (string-list [_]
    (list ((= ns "") (str base) (str ns "/" base))))

  Hash
  (sha1 [_] (sha1 base))

  Eq
  (=* [_ x] (=* x base)))

(extend-type Symbol
  Tagged
  (untag [s] s)

  Eq
  (=* [s x]
    (symkey= s (untag x))))

(def namespace-punct
  (parser/rule "namespace-punct"
               (parser/one-of "._<>=*+!-?")))

(def rest-of-namespace
  (parser/rule "rest-of-namespace"
               (parser/none-or-more (parser/any parser/alpha
                                                parser/digit
                                                namespace-punct))))

(def read-namespace
  (parser/rule "namespace"
               (parser/apply-to (fn [start the-rest]
                               (symbol (to-str (cons start the-rest))))
                             parser/alpha
                             rest-of-namespace
                             (parser/ignore "/"))))

(def read-symbol
  (parser/rule "tagged-symbol"
               (parser/apply-to (fn [file-name line-number ns start the-rest]
                               (let [ns-prefix ((= "" ns) ns (str ns "/"))]
                                 (tagged-symbol ns (symbol (to-str (cons start the-rest)))
                                                (symbol (to-str (comp (list ns-prefix start)
                                                                           the-rest)))
                                                file-name line-number)))
                             parser/file-name
                             parser/line-number
                             (parser/optional read-namespace)
                             symbol-start
                             rest-of-symbol)))

(def read-keyword
  (parser/rule "keyword"
               (parser/apply-to (fn [start the-rest]
                               (keyword (to-str (cons start the-rest))))
                             (parser/ignore ":")
                             symbol-start
                             rest-of-symbol)))

(def read-string-newline
  (parser/rule "newline"
               (map (parser/all "\\" "n")
                    (constantly "\n"))))

(def read-string-tab
  (parser/rule "tab"
               (map (parser/all "\\" "t")
                    (constantly "\t"))))

(def read-string-backspace
  (parser/rule "backspace"
               (map (parser/all "\\" "b")
                    (constantly "\b"))))

(def read-string-return
  (parser/rule "return"
               (map (parser/all "\\" "r")
                    (constantly "\r"))))

(def read-string-formfeed
  (parser/rule "formfeed"
               (map (parser/all "\\" "f")
                    (constantly "\f"))))

(def read-string-doublequote
  (parser/rule "doublequote"
               (map (parser/all "\\" "\"")
                    (constantly "\""))))

(def read-string-backslash
  (parser/rule "backslash"
               (map (parser/all "\\" "\\")
                    (constantly "\\"))))

(defn string-frag-len [s]
  (inline-C Number "
    char *str = NULL;
    int64_t strLen;
    if (arg0->type == StringType) {
      str = ((String *)arg0)->buffer;
      strLen = ((String *)arg0)->len;
    } else if (arg0->type == SubStringType) {
      str = ((SubString *)arg0)->buffer;
      strLen = ((SubString *)arg0)->len;
    }
    int64_t len;
    for (len = 0; len < strLen && str[len] != 34 && str[len] != 92;)
       len++;
    return(numberValue(len));
"))

(def read-string-fragment
  (parser/rule "read-string-fragment"
               (parser/term-fn (fn [text]
                                 (string-frag-len text)))))

(def read-const-string
  (parser/rule "string"
               (parser/apply-to to-str
                                (parser/ignore "\"")
                                (parser/none-or-more
                                 (parser/any read-string-fragment
                                             read-string-backslash
                                             read-string-doublequote
                                             read-string-tab
                                             read-string-backspace
                                             read-string-return
                                             read-string-formfeed
                                             read-string-newline))
                                (parser/ignore "\""))))

;; only reads integers
(def read-number
  (parser/rule "number"
               (parser/any (map (parser/one-or-more parser/digit)
                                 str-to-int)
                           (parser/apply-to (fn [digits]
                                           (* -1 (str-to-int digits)))
                                         (parser/ignore "-")
                                         (parser/one-or-more parser/digit)))))

(def read-sub-form
  (parser/recurse "form"))

(def read-quoted
  (parser/rule "quoted"
               (parser/apply-to (fn [arg]
                               (list 'quote arg))
                             (parser/ignore "'")
                             read-sub-form)))

(def read-list
  (parser/rule "list"
               (parser/apply-to comp
                             (parser/ignore "(")
                             (parser/none-or-more read-sub-form)
                             (parser/ignore ")"))))

(def read-hash-set
  (parser/rule "hash-map"
               (parser/apply-to (partial cons 'hash-set)
                             (parser/ignore "#{")
                             (parser/none-or-more read-sub-form)
                             (parser/ignore "}"))))

(def read-hash-map
  (parser/rule "hash-map"
               (parser/apply-to (partial cons 'hash-map)
                             (parser/ignore "{")
                             (parser/none-or-more read-sub-form)
                             (parser/ignore "}"))))

(def read-vector
  (parser/rule "vector"
               (parser/apply-to (partial cons 'vector)
                             (parser/ignore "[")
                             (parser/none-or-more read-sub-form)
                             (parser/ignore "]"))))

(def not-eol
  (parser/rule "not-eol"
               (parser/not-char "\n")))

(def read-comment
  (parser/rule "comment"
               (parser/all ";"
                           (parser/ignore (parser/none-or-more not-eol))
                           "\n"
                           (parser/ignore parser/inc-line))))

(def whitespace
  (parser/rule "whitespace"
               (parser/any "," " " "\t" "\r"
                           (parser/all "\n"
                                       (parser/ignore parser/inc-line))
                           read-comment)))

(def read-sub-dest
  (parser/recurse "destructure"))

(def read-arg
  (parser/rule "arg"
               (parser/apply-to comp
                             (parser/ignore (parser/none-or-more whitespace))
                             read-symbol
                             (parser/ignore (parser/none-or-more whitespace)))))

(def read-var-arg
  (parser/rule "var-arg"
               (parser/all (parser/ignore (parser/none-or-more whitespace))
                           "&"
                           read-arg)))

(def read-list-destructure
  (parser/rule "list-destructure"
               (parser/apply-to (fn [args tail]
                               (comp args (remove tail (partial = "&"))))
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "[")
                             (parser/none-or-more read-sub-dest)
                             (parser/any read-var-arg
                                         (parser/always (list :no-tail)))
                             (parser/ignore "]"))))

(def read-destructure
  (parser/recursive-rule "destructure"
                         (parser/any read-list-destructure
                                     read-arg)))

(def read-args
  (parser/rule "args"
               (parser/apply-to comp
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "[")
                             (parser/none-or-more read-destructure)
                             (parser/any read-var-arg
                                         (parser/always empty-list))
                             (parser/ignore "]"))))

(def read-main
  (parser/rule "main"
               (parser/apply-to (partial list* 'main)
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "main")
                             (parser/ignore (parser/one-or-more whitespace))
                             read-args
                             (parser/one-or-more read-sub-form)
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ")"))))

(def read-single-arity
  (parser/rule "single-arity"
               (parser/apply-to (fn [& vs]
                               (list (cons 'fn-arity vs)))
                             read-args
                             (parser/none-or-more read-sub-form))))

(def read-multi-arity
  (parser/rule "multi-arity"
               (parser/apply-to (partial list 'fn-arity)
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             read-args
                             (parser/none-or-more read-sub-form)
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ")"))))

(def read-arities
  (parser/rule "arities"
               (parser/any read-single-arity
                           (parser/one-or-more read-multi-arity))))

(def read-defn
  (parser/rule "defn"
               (parser/apply-to (fn [name arities]
                               (list 'def name (list 'fn name arities)))
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "defn")
                             (parser/ignore (parser/one-or-more whitespace))
                             read-symbol
                             (parser/ignore (parser/one-or-more whitespace))
                             read-arities
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ")"))))

(def read-fn
  (parser/rule "fn"
               (parser/apply-to (partial list 'fn)
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "fn")
                             (parser/ignore (parser/one-or-more whitespace))
                             (parser/any read-symbol
                                         (parser/apply-to (fn [file line]
                                                         (tagged-symbol "" 'anon 'anon file line))
                                                       parser/file-name
                                                       parser/line-number))
                             (parser/ignore (parser/none-or-more whitespace))
                             read-arities
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ")"))))

(def read-let-binding
  (parser/rule "let-binding"
               (parser/all (parser/ignore (parser/none-or-more whitespace))
                           read-destructure
                           (parser/ignore (parser/none-or-more whitespace))
                           read-sub-form)))

(def read-let
  (parser/rule "let"
               (parser/apply-to (partial list* 'let)
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "let")
                             (parser/ignore (parser/one-or-more whitespace))
                             (parser/ignore "[")
                             (parser/none-or-more read-let-binding)
                             (parser/ignore "]")
                             (parser/one-or-more read-sub-form)
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ")"))))

(def read-for-let
  (parser/rule "for-let"
               (parser/apply-to (fn [bindings]
                               (list :let (fn [_ expr]
                                            (list 'let bindings expr))))
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ":let")
                             (parser/ignore (parser/one-or-more whitespace))
                             (parser/ignore "[")
                             (parser/none-or-more read-let-binding)
                             (parser/ignore "]"))))

(def read-for-when
  (parser/rule "for-when"
               (parser/apply-to (fn [value]
                               (list :when (fn [wrap-sym expr]
                                             (list 'extract
                                                   (list 'or (list 'and value
                                                                   (list 'maybe expr))
                                                         (list 'maybe
                                                               (list 'zero wrap-sym)))))))
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ":when")
                             (parser/ignore (parser/one-or-more whitespace))
                             read-sub-form)))

(def read-for-when-not
  (parser/rule "for-when-not"
               (parser/apply-to (fn [value]
                               (list :when-not (fn [wrap-sym expr]
                                                 (list 'extract
                                                       (list 'or
                                                             (list 'and
                                                                   (list '=* 'nothing value)
                                                                   (list 'maybe expr))
                                                             (list 'maybe (list 'zero wrap-sym)))))))
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ":when-not")
                             (parser/ignore (parser/one-or-more whitespace))
                             read-sub-form)))

(defn make-for-binding [binding value]
  (list :binding (fn [wrap-sym expr]
                   (list 'flat-map value
                         (list 'fn 'anon
                               (list (list 'fn-arity
                                           (list binding)
                                           (list expr))))))))

(def read-for-binding
  (parser/rule "for-binding"
               (parser/any read-for-let
                           read-for-when
                           read-for-when-not
                           (map read-let-binding
                                (fn [[bound value]]
                                  (make-for-binding bound value))))))

(def read-for
  (parser/rule "for"
               (parser/apply-to (fn [bound val bindings body]
                               (let [wrap-sym (gensym "wrapper_")
                                     bindings (cons (make-for-binding bound wrap-sym) bindings)]
                                 (list 'let (list (list wrap-sym val))
                                       (reduce (reverse bindings) (list 'wrap wrap-sym body)
                                               (fn [expr [binding value]]
                                                 (value wrap-sym expr))))))
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "for")
                             (parser/ignore (parser/one-or-more whitespace))
                             (parser/ignore "[")
                             read-destructure
                             read-sub-form
                             (parser/none-or-more read-for-binding)
                             (parser/ignore "]")
                             read-sub-form
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ")"))))

(def read-apply
  (parser/rule "apply"
               (parser/apply-to (fn [f args]
                               (list 'apply* f (cons 'list args)))
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "apply")
                             (parser/ignore (parser/one-or-more whitespace))
                             read-sub-form
                             (parser/one-or-more read-sub-form)
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ")"))))

(def read-apply-to
  (parser/rule "apply-to"
               (parser/apply-to (fn [f arg args]
                               (let [wrap-sym (gensym "wrapper_")
                                     msg (str (list 'apply-to f arg args))
                                     r (list 'let (list (list wrap-sym arg))
                                             (list 'print-err msg)
                                             (list
                                              (list 'apply* (list 'wrap wrap-sym f)
                                                    (cons 'list (cons wrap-sym args)))))]
                                 (list 'let (list (list wrap-sym arg))
                                       (list 'apply* (list 'wrap wrap-sym f)
                                             (cons 'list (cons wrap-sym args))))))
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "apply-to")
                             (parser/ignore (parser/one-or-more whitespace))
                             read-sub-form
                             read-sub-form
                             (parser/none-or-more read-sub-form)
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ")"))))

(def read-comp
  (parser/rule "comp"
               (parser/apply-to (fn [arg args]
                               (list 'comp* arg (cons 'list args)))
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "comp")
                             (parser/ignore (parser/one-or-more whitespace))
                             read-sub-form
                             (parser/none-or-more read-sub-form)
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore ")"))))

(defn match-expansion [match-value type match-args]
  (let [args-sym (gensym "type-args-")
        args-syms (map (zip-lists match-args
                                  (range (inc (count match-args))))
                       (fn [[arg arg-index]]
                         (list arg (symbol (str "type-arg-" arg-index)))))]
    (list 'and (list 'instance? type match-value)
          (list 'let (list (list args-sym (list 'type-args match-value)))
                (list 'and (list '<= (count match-args)
                                 (list 'count args-sym))
                      (list 'let (list (list (comp (map args-syms (fn [[_ x]] x))
                                                   (list :no-tail))
                                             args-sym))
                            (reduce args-syms (list 'maybe args-sym)
                                    (fn [expr [arg sym]]
                                      ((= '_ arg) expr (list 'and (list '= arg sym) expr))))))))))

(def read-match
  (parser/rule "match"
               (parser/apply-to match-expansion
                             (parser/ignore "(")
                             (parser/ignore (parser/none-or-more whitespace))
                             (parser/ignore "match")
                             (parser/ignore (parser/one-or-more whitespace))
                             read-symbol
                             (parser/ignore (parser/one-or-more whitespace))
                             read-symbol
                             (parser/ignore (parser/one-or-more whitespace))
                             (parser/one-or-more (parser/apply-to comp
                                                               (parser/any read-symbol
                                                                           read-keyword
                                                                           read-const-string
                                                                           read-number
                                                                           read-quoted)
                                                               (parser/ignore (parser/none-or-more whitespace))))
                             (parser/ignore ")"))))

(def read-form
  (parser/recursive-rule "form"
                         (parser/apply-to comp
                                       (parser/ignore (parser/none-or-more whitespace))
                                       (parser/any read-number
                                                   read-match
                                                   read-keyword
                                                   read-symbol
                                                   read-quoted
                                                   read-const-string
                                                   read-let
                                                   read-main
                                                   read-defn
                                                   read-fn
                                                   read-for
                                                   read-comp
                                                   read-apply
                                                   read-apply-to
                                                   read-hash-map
                                                   read-hash-set
                                                   read-vector
                                                   read-list)
                                       (parser/ignore (parser/none-or-more whitespace)))))
